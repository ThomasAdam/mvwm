<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Id: images.xml,v 1.4.6.1 2013/01/20 05:09:05 dane Exp $ -->
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "../docbook-xml/docbookx.dtd"
[
<!ENTITY % myents SYSTEM "../fvwm.ent" >
%myents;
]>

<section id="icons_and_images">
<title>Icons and Images</title>
<para>Fvwm can load <markup>.xbm,</markup> <markup>.xpm,</markup>
<markup>.png</markup> and
<markup>.svg</markup> images. <emphasis remap='B'>XBM</emphasis>
images are monochrome.  Fvwm can always display
<emphasis remap='B'>XBM</emphasis> files. <emphasis remap='B'>XPM</emphasis>
and <emphasis remap='B'>PNG</emphasis> formats are color images.
SVG is a vector graphics image format.
Compile-time options determine whether fvwm can display
<emphasis remap='B'>XPM</emphasis>, <emphasis remap='B'>PNG</emphasis> or
<emphasis remap='B'>SVG</emphasis>
icons and images. See the <emphasis remap='I'>INSTALL.fvwm</emphasis>
file for more information.</para>

<!-- TODO: Create a link to INSTALL.fvwm file? -->

<para>The related <emphasis remap='B'>SHAPE</emphasis>
compile-time option can make fvwm display spiffy shaped icons.</para>


<section id='svg_rendering_options'>
<title>SVG rendering options</title>

<para>
SVG images are generated from (XML) text files.  A really simple SVG file
might look something like this:</para>

<programlisting>
&lt;svg width="120" height="80">
	&lt;rect fill="red"     width="40" height="40"  x="0"   y="0"  />
	&lt;rect fill="lime"    width="40" height="40"  x="40"  y="0"  />
	&lt;rect fill="blue"    width="40" height="40"  x="80"  y="0"  />
	&lt;rect fill="cyan"    width="40" height="40"  x="0"   y="40" />
	&lt;rect fill="magenta" width="40" height="40"  x="40"  y="40" />
	&lt;rect fill="yellow"  width="40" height="40"  x="80"  y="40" />
&lt;/svg>
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/plain.png" />
	</imageobject>
	<caption>
		<code>image.svg</code>
		<para />
	</caption>
</mediaobject>

<para>
By default, SVG images are rendered as the image creator intended
them to. But since SVG is a vector graphics format, the images can
be rendered at any chosen size and rotation, e.g. making it possible
to use the same icon file rendered at diffrent sizes for the
<fvwmref cmd="Style" opt="Icon"/> and <fvwmref cmd="Style" opt="MiniIcon"/>
styles.</para>

<para>The rendering options are specified as a string appended to the SVG
filename as follows:</para>

<cmdsynopsis>
	<filename
		><replaceable>image.svg</replaceable
	></filename
	><literal>:</literal
	><literal
		><arg choice='opt'>!</arg
	></literal
	><arg choice='opt'
	        ><synopfragmentref linkend="svg_rendering_size"
			>size</synopfragmentref
	></arg
	><arg choice='plain' rep='repeat'
		><arg choice='opt'
		        ><synopfragmentref linkend="svg_rendering_position"
				>position</synopfragmentref
		></arg
		><arg choice='opt'
		        ><synopfragmentref linkend="svg_rendering_rotation"
				>rotation</synopfragmentref
		></arg
		><arg choice='opt'
		        ><synopfragmentref linkend="svg_rendering_scale"
				>scale</synopfragmentref
		></arg
	> </arg
	><synopfragment id="svg_rendering_size"
		><literal
			><arg choice='opt'>-</arg
		></literal
		><replaceable>width</replaceable
		><literal
			><arg choice='req'>x</arg
		></literal
		><literal
			><arg choice='opt'>-</arg
		></literal
		><replaceable>height</replaceable
	></synopfragment
	><synopfragment id="svg_rendering_position"
		><literal
			><group choice='req'
				><arg choice='plain'>-</arg
				><arg choice='plain'>+</arg
			></group
		></literal
		><replaceable>xpos</replaceable
		><literal
			><group choice='req'
				><arg choice='plain'>-</arg
				><arg choice='plain'>+</arg
			></group
		></literal
		><replaceable>ypos</replaceable
	></synopfragment
	><synopfragment id="svg_rendering_rotation"
		><literal>@</literal
		><literal
			><arg choice='opt'>-</arg
		></literal
		><replaceable>angle</replaceable
	></synopfragment
	><synopfragment id="svg_rendering_scale"
		><literal
			><group choice='req'
				><arg choice='plain'>*</arg
				><arg choice='plain'>/</arg
			></group
		></literal
		><literal
			><arg choice='opt'>-</arg
		></literal
		><replaceable>factor</replaceable
		><literal
			><group choice='opt'
				><arg choice='plain'>x</arg
				><arg choice='plain'>y</arg
			></group
		></literal
	></synopfragment>
</cmdsynopsis>

<para>
The option string always starts with a colon ('<literal>:</literal>')
to separate it from the filename.  An empty option string can skip this
colon, but it might still be a good idea to include it to prevent
ambiguity if the filename contains any colon.</para>

<programlisting>
filename_without_colon.svg
filename:with:colon.svg:
</programlisting>

<para>
An exclamation point ('<literal>!</literal>') transposes the entire final
image (including the rendering area), i.e. all the horizontal and all the
vertical coordinates are swapped with each other.</para>

<programlisting>
image.svg:!
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/transpose.png" />
	</imageobject>
	<caption>
		<code>image.svg:!</code>
		<para />
	</caption>
</mediaobject>

<para>
<replaceable>width</replaceable> and <replaceable>height</replaceable>
specifies the dimensions of the rendering area in pixels, i.e. the
dimensions of the resulting image.  The actual image is fitted to fill
the entire rendering area.</para>

<programlisting>
image.svg:60x60
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/size.png" />
	</imageobject>
	<caption>
		<code>image.svg:60x60</code>
		<para />
	</caption>
</mediaobject>

<para>
Use a <replaceable>width</replaceable> or <replaceable>height</replaceable>
value of 0 to keep the aspect ratio.</para>

<programlisting>
image.svg:0x60
image.svg:60x0
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/size_keep_ratio_x.png" />
	</imageobject>
	<caption>
		<code>image.svg:0x60</code>
		<para />
	</caption>
</mediaobject>
<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/size_keep_ratio_y.png" />
	</imageobject>
	<caption>
		<code>image.svg:60x0</code>
		<para />
	</caption>
</mediaobject>

<para>A '<literal>-</literal>' before <replaceable>width</replaceable>
mirrors the rendering area horizontally.</para>

<programlisting>
image.svg:-0x0
</programlisting>

<para>A '<literal>-</literal>' before <replaceable>height</replaceable>
mirrors the rendering area vertically.</para>

<programlisting>
image.svg:0x-0
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/size_mirroring_y.png" />
	</imageobject>
	<caption>
		<code>image.svg:0x-0</code>
		<para />
	</caption>
</mediaobject>

<para>
<replaceable>xpos</replaceable> and <replaceable>ypos</replaceable>
specifies a translation of the image in pixels.  A positive
<replaceable>xpos</replaceable> value moves the image to the right.  A
positive <replaceable>ypos</replaceable> value moves it down.  Moving
it partially outside of the rendering area results in a cropped
image.</para>

<programlisting>
image.svg:-30-0
image.svg:-0+10
image.svg:-30+10
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/position.png" />
	</imageobject>
	<caption>
		<code>image.svg:-30+10</code>
		<para />
	</caption>
</mediaobject>

<para>
<replaceable>angle</replaceable> specifies a rotation around the actual
image center in degrees. This might result in a cropped image.  A
positive value rotates the image clockwise.  Floating point values are
recognized.</para>

<programlisting>
image.svg:@180
image.svg:@-90
image.svg:@30
image.svg:@57.3
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/rotation.png" />
	</imageobject>
	<caption>
		<code>image.svg:@30</code>
		<para />
	</caption>
</mediaobject>

<para>
<replaceable>factor</replaceable> specifes a scaling of the actual
image (not the rendering area). Scaling it up results in a cropped
image.  Floting point values are recognized.  Division by zero is
ignored.  If <replaceable>factor</replaceable> is directly followed
by a '<literal>x</literal>' or a '<literal>y</literal>', the scaling
is horizontal or vertical respectively.  Otherwise the scaling is
uniform.</para>

<programlisting>
image.svg:*2
image.svg:/2
image.svg:/3x
image.svg:/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/scale_up_uniform.png" />
	</imageobject>
	<caption>
		<code>image.svg:*2</code>
		<para />
	</caption>
</mediaobject>
<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/scale_down_uniform.png" />
	</imageobject>
	<caption>
		<code>image.svg:/2</code>
		<para />
	</caption>
</mediaobject>
<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/scale_down_y.png" />
	</imageobject>
	<caption>
		<code>image.svg:/2y</code>
		<para />
	</caption>
</mediaobject>

<para>
Scaling down a translated or rotated image can prevent cropping.</para>

<programlisting>
image.svg:@30*0.6
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/prevent_cropping.png" />
	</imageobject>
	<caption>
		<code>image.svg:@30*0.6</code>
		<para />
	</caption>
</mediaobject>

<para>
Repeated usage of translation, rotation, and scaling is allowed.
 Translation and rotation are additive.  Scaling is multiplicative.</para>

<programlisting>
image.svg:*2/3
image.svg:/3x/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/scale_down.png" />
	</imageobject>
	<caption>
		<code>image.svg:/3x/2y</code>
		<para />
	</caption>
</mediaobject>

<para>
When combining affine transformations, the scaling is always done first,
then the rotation, and finally the translation.</para>

<programlisting>
image.svg:-30+10@30/3x/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/affine_combined.png" />
	</imageobject>
	<caption>
		<code>image.svg:-30+10@30/3x/2y</code>
		<para />
	</caption>
</mediaobject>

<para>
Use a negative scale <replaceable>factor</replaceable> to mirror the
actual image.</para>

<programlisting>
image.svg:-30+10@30/-3x/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/scale_mirroring.png" />
	</imageobject>
	<caption>
		<code>image.svg:-30+10@30/-3x/2y</code>
		<para />
	</caption>
</mediaobject>

<para>
Mirroring of the rendering area is done after any scaling, rotation or
translation of the image.</para>

<programlisting>
image.svg:-0x0-30+10@30/3x/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/size_mirroring.png" />
	</imageobject>
	<caption>
		<code>image.svg:-0x0-30+10@30/3x/2y</code>
		<para />
	</caption>
</mediaobject>

<para>
Transposing is done last of all, after everything else.</para>

<programlisting>
image.svg:!-0x0-30+10@30/3x/2y
</programlisting>

<mediaobject output='html'>
	<imageobject><imagedata
		fileref="../images/svg_rendering/all_combined.png" />
	</imageobject>
	<caption>
		<code>image.svg:!-0x0-30+10@30/3x/2y</code>
		<para />
	</caption>
</mediaobject>

</section>
</section>
