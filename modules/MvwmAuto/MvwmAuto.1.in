.\" t

.\" @(#)@PACKAGE@-@VERSION@ @RELDATELONG@
.de EX		\"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.ta .3i .6i .9i 1.2i 1.5i 1.8i
.TH MvwmAuto 1 "@RELDATELONG@ (@VERSION@)" Mvwm "Mvwm Modules"
.UC
.SH NAME
\fIMvwmAuto\fP \- the mvwm auto-raise module
.SH SYNOPSIS
.nf
Module MvwmAuto Timeout [-passid] [-menter|-menterleave|-mfocus] [EnterCommand [LeaveCommand]]
.fi
\fIMvwmAuto\fP can only be invoked by mvwm.
Command line invocation of the \fIMvwmAuto\fP will not work.

.SH DESCRIPTION
The \fIMvwmAuto\fP module is most often used to automatically raise
focused windows.

.SH INVOCATION
The correct syntax is:
.nf
.EX
Module MvwmAuto Timeout [-passid] [-menter|-menterleave|-mfocus] [EnterCommand [LeaveCommand]]
.sp
AddToMenu Modules
+ "Auto Raise (300 ms)"  Module MvwmAuto 300
+ "Auto Raise/Lower"     Module MvwmAuto 300 "Silent Raise" "Silent Lower"
.EE
.fi
The \fITimeout\fP argument is required. It specifies how long a
window must retain the keyboard input focus before the command is
executed. The delay is measured in milliseconds, and any integer
greater than zero is valid.

If the literal option \fI-passid\fP is given, the window id of the
window just entered or left is appended to the command that is
sent to mvwm.  This can be used with the \fBWindowId\fP command of
mvwm.

The options \fI-menter\fP, \fI-menterleave\fP and \fI-mfocus\fP
influence the actions MvwmAuto reacts to.  No more than one of the
options can be chosen.  In
.I -mfocus
mode, MvwmAuto raises the window that has the focus.  In
.I -menter
mode, MvwmAuto raises the window under the pointer when the
pointer enters a window.  The
.I LeaveCommand
is executed on the window that was below the pointer before it
entered the new window.  When the pointer leaves a window and
enters the root window, the
.I EnterCommand
is executed too, but without a window to operate on.  In
.I -menterleave
mode, MvwmAuto works just like in
.I -menter
mode, but the
.I LeaveCommand
is also executed if the pointer moves out of a window but does not
enter a new window.  The latter two modes of operation are useful
with windows that do not accept the focus.

Note: -menterleave mode can interfere with popup windows of some
applications.  One example is the zoom menu of Ghostview.  Please
do not complain about this to us - it is a bug in Ghostview.

\fIEnterCommand\fP and \fILeaveCommand\fP are optional.
\fIEnterCommand\fP is executed \fITimeout\fP milliseconds after a
window gets the input focus, \fILeaveCommand\fP is executed
\fITimeout\fP milliseconds after the window has lost focus.
Note that you always should use the 'Silent' keyword before
the command itself.  MvwmAuto prepends "Silent " to the command
string on its own if yor forget this.  Without this prefix mvwm would
ask you for a window to act on if the window has died before the
command sent by MvwmAuto has been processed by mvwm.  This can for
example happen with popup menus.

"Silent Raise" is the default for \fIEnterCommand\fP, but any mvwm function
is allowed. I would not use "Close" or "Destroy" with a low timeout,
though.  The \fILeaveCommand\fP can be handy for a tidy desktop.
Experiment with:
.nf
.EX
Module MvwmAuto 0 Nop "Silent Lower"
Module MvwmAuto 0 Nop "Silent Iconify"
.EE

An example for auto raising windows with ClickToFocus:
.nf
.EX
Style * ClickToFocus
MvwmAuto 0 -menter "Silent Raise"
.EE

An example for auto raising and lowering only some windows:
.nf
To start MvwmAuto:
.EX
MvwmAuto 0 -passid -menter \\
"Silent selective_raiselower raise" \\
"Silent selective_raiselower lower"
.EE
And put this in your .mvwm2rc:
.EX
AddToFunc selective_raiselower
+ I WindowId $1 (MvwmIconMan) $0
+ I WindowId $1 (MvwmButtons) $0
+ I WindowId $1 (xclock) $0
\&...
.EE

More complex example (three MvwmAuto's are running):
.nf
.EX
DestroyFunc RestoreIconified
AddToFunc   RestoreIconified
+ I Current (Iconic) Iconify false

DestroyFunc RegisterFocus
AddToFunc   RegisterFocus
+ I Exec date +"%T $n focused" >>/tmp/focus-stats.txt

DestroyFunc RegisterUnfocus
AddToFunc   RegisterUnfocus
+ I Exec date +"%T $n unfocused" >>/tmp/focus-stats.txt

KillModule MvwmAuto
Module MvwmAuto 250 Raise Nop
Module MvwmAuto 800 RestoreIconified Nop
Module MvwmAuto   0 RegisterFocus RegisterUnfocus
.EE

.SH NOTES

There is a special Raise/Lower support in MvwmAuto. It was added to improve
Raise/Lower callbacks, since most of MvwmAuto usages is auto-raising or
auto-lowering. This improvement includes locking on M_RAISE_WINDOW and
M_LOWER_WINDOW packets and not raising/lowering explicitly raised windows.
The special Raise/Lower support is enabled only when either
\fIEnterCommand\fP or \fILeaveCommand\fP contain substring "Raise" or
"Lower". You can use this fact to enable/disable any special support by
renaming these commands, if MvwmAuto does not automatically do want you
expect it to do.

Using \fIMvwmAuto\fP in conjunction with \fIEdgeCommand\fP can be even
more powerful. There is a short example in the \fImvwm\fP man page.

.SH AUTHOR
.nf
MvwmAuto just appeared one day, nobody knows how.
MvwmAuto was simply rewritten 09/96, nobody knows by whom.
