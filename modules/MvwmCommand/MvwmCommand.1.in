.\" t
.\" @(#)@PACKAGE@-@VERSION@ @RELDATELONG@
.de EX		\"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.25i
..
.de EE
.fi
.in -.25i
.if n .sp 1
.if t .sp .5
..
.ta .2i .4i .6i .8i
.TH MvwmCommand 1 "@RELDATELONG@ (@VERSION@)" Mvwm "Mvwm Modules"
.UC
.SH NAME
MvwmCommand \- mvwm command external interface

.SH SYNOPSIS
MvwmCommand [-cmrvw] [-S name] [-i level] [-f name] [-F level] [command...]

.SH DESCRIPTION

MvwmCommand lets you monitor mvwm transaction and issue mvwm command
from a shell command line or scripts.
MvwmCommand takes each argument as a mvwm command. Quotes can be
used to send commands including spaces.
.EX
MvwmCommand 'MvwmPager 0 1'
.EE
.br
.SH INVOCATION
MvwmCommandS should be spawned once by mvwm, either in .mvwm2rc file,
from menu, or from MvwmConsole.
From then on, MvwmCommand
can be called from a shell or script to execute mvwm commands.

From within .mvwm2rc file:
.EX
Module MvwmCommandS

    or

AddToFunc StartFunction "I" Module MvwmCommandS
.EE

Then, in script file or from shell:

.EX
MvwmCommand  'popup Utilities'
.EE

.SH OPTIONS
.IP "\fI-c\fR" 0.4i
Informs MvwmCommand to read multiple commands from the standard input
instead of the one command specified in the command line arguments.
This disables \fI-m\fR or \fI-i\fR.
.sp
.EX
(echo "Exec xload"; echo "Beep") | MvwmCommand -c
.EE

.IP "\fI-F <level>\fR" 0.4i
Specifies the level of mvwm window flags MvwmCommand outputs.
.sp
.RS
.IP 0 0.4i
No window flags will be printed.
.RE
.RS
.IP 2 0.4i
Full window flags will be printed if information level, -i
option, is 2 or 3.
.sp
.RE

.IP "\fI-f <name>\fR" 0.4i
Specifies an alternative FIFO set to communicate with a server.
The default FIFO set is /var/tmp/MvwmCommand-${DISPLAY}C, in which
MvwmCommand..C is used to send commands and MvwmCommand..M is to receive
messages. If that path is unusable ${MVWM_USERDIR}/MvwmCommand-${DISPLAY}
will be used instead.
MvwmCommandS must have been invoked with the same <name> as its first argument
prior to MvwmCommand invocation.
Alternatively, option -S can be used. Refer option -S.
This option -f is useful when a dedicated connection is necessary
to run a background job while another connection is kept for
interactive use.

.IP "\fI-i <level>\fR"
Specifies the level of information that MvwmCommand outputs.
.sp
.RS
.IP 0 0.4i
Error messages only.
.EX
MvwmCommand -i0 MvwmBanner
.EE
will show a banner without any output. On the other hand,
.EX
MvwmCommand -i 0 foobar
.EE
will return,
.EX
[mvwm][executeModule]: <<ERROR>> No such module
\'foobar\' in ModulePath '/usr/lib/X11/mvwm'
.EE

Note that Mvwm doesn't return any error messages in
cases like below since 'windowid' itself is a valid command.
.sp
.EX
MvwmCommand -i 0 'windowid foo bar'
.EE
.IP 1
Errors, replies and window configuration information. This is the default.
.EX
MvwmCommand send_windowlist
.EE
Information like below will show up.
.EX

0x02000014 window               MvwmConsole
0x02000014 icon                 MvwmConsole
0x02000014 class                XTerm
0x02000014 resource             MvwmConsole
0x01c00014 window               console
0x01c00014 icon                 console
0x01c00014 class                XTerm
0x01c00014 resource             console
0x01000003 window               Mvwm Pager
0x01000003 icon
0x01000003 class                MvwmModule
0x01000003 resource             MvwmPager
0x00c0002c window               emacs: MvwmCommand.man
0x00c0002c icon                 MvwmCommand.man
0x00c0002c icon file            xemacs.xpm
0x00c0002c class                Emacs
0x00c0002c resource             emacs
end windowlist
.EE
The first column shows the window ID number, which can be used in 'windowid' command.
The second column shows the information types.
The last column shows the information contents.
If no information is returned, add -w <time> or -r option.
This might be needed in heavily loaded systems.
.IP 2
Above and static window information.
.EX
MvwmCommand -i2 'MvwmPager 0 1'
.EE
The below is its output.
.EX

0x03c00003 frame                x 962, y 743, width 187, height 114
0x03c00003 desktop              0
0x03c00003 StartIconic          no
0x03c00003 OnTop                yes
0x03c00003 Sticky               yes
0x03c00003 WindowListSkip       yes
0x03c00003 SuppressIcon         no
0x03c00003 NoiconTitle          no
0x03c00003 Lenience             no
0x03c00003 StickyIcon           no
0x03c00003 CirculateSkipIcon    no
0x03c00003 CirculateSkip        no
0x03c00003 ClickToFocus         no
0x03c00003 SloppyFocus          no
0x03c00003 SkipMapping          no
0x03c00003 Handles              no
0x03c00003 Title                no
0x03c00003 Mapped               no
0x03c00003 Iconified            no
0x03c00003 Transient            no
0x03c00003 Raised               no
0x03c00003 Visible              no
0x03c00003 IconOurs             no
0x03c00003 PixmapOurs           no
0x03c00003 ShapedIcon           no
0x03c00003 Maximized            no
0x03c00003 WmTakeFocus          no
0x03c00003 WmDeleteWindow       yes
0x03c00003 IconMoved            no
0x03c00003 IconUnmapped         no
0x03c00003 MapPending           no
0x03c00003 HintOverride         yes
0x03c00003 MWMButtons           no
0x03c00003 MWMBorders           no
0x03c00003 title height         0
0x03c00003 border width         4
0x03c00003 base size            width 8, height 7
0x03c00003 size increment       width 9, height 9
0x03c00003 min size             width 8, height 7
0x03c00003 max size             width 32767, height 32767
0x03c00003 gravity              SouthEast
0x03c00003 pixel                text 0xffffff, back 0x7f7f7f
0x03c00003 window               Mvwm Pager
0x03c00003 icon                 Mvwm Pager
0x03c00003 class                MvwmModule
0x03c00003 resource             MvwmPager
.EE
.IP 3
All information available.
.EX
MvwmCommand -i3 'Killmodule Mvwm*'
.EE
This will report which windows are closed.
.EX
0x03400003 destroy
0x02400002 destroy
.EE
.RE

.IP "\fI-m\fR"
Monitors mvwm window information transaction. MvwmCommand continuously outputs
information that it receives without exiting.
This option can be used in a
background job often combined with -i3 option in order to control windows
dynamically.
.EX
MvwmCommand -mi3 | grep 'iconify'
.EE
It will report when windows are iconified or de-iconified.
.sp
Note: MvwmCommand does not block buffer its output but many utilities such as
grep or sed use block buffer. The output of the next example will not show up
until either MvwmCommand is terminated or stdout buffer from
grep is filled.
.EX
MvwmCommand -mi3 | grep ' map' |
sed 's/\\(0x[0-9a-f]*\\).*/windowid \\1 move 0 0/'
.EE
Instead, use tools with buffer control such as pty or perl.
The below will iconify new windows when opened.
.EX
Mvwm -mi3 | perl -ne '
$|=1;
print "windowid $1 iconify\\n" if /^(0x\\S+) add/;
\' > ~/\.MvwmCommandC
.EE
.IP "\fI-r\fR"
Waits for a reply before it exits.
MvwmCommand exits if no information or error is returned in a fixed amount of
time period. (Refer option -w.)
The option -r overrides this time limit and wait for at least one message
back.
After the initial message, it will wait for another message for the time
limit.
This option is useful when the system is too loaded to make any prediction
when the system is responding AND the command causes some
message to be sent back.

.IP "\fI-S <name>\fR" 0.4i
Invokes another server, MvwmCommandS, with FIFO set <name>.
.br
If -f option is not used with this option,
the invoking MvwmCommand uses the default FIFO to communicate
the default server to invoke a new server.
.br
If -f option is used with this option,
the invoking MvwmCommand uses the default FIFO to communicate
the default server to invoke a new server. Then, switch the FIFO
set and start communicating the new server.
.br
This option -S is useful when a dedicated connection is necessary
to run a background
job while another connection is kept for interactive use.

If the <name> is a relative path name, that is relative from where
mvwm is running, not from where MvwmCommand is invoked.

.IP "\fI-v\fR"
Returns MvwmCommand version number and exits.

.IP "\fI-w <time>\fR"
Waits for <time> micro seconds for a message.
MvwmCommand exits if no information or error is returned in a fixed amount of
time period unless option -m is used.
The default is 500 ms. This option overrides this default value.

.SH WRAPPER
.sp
.sp
MvwmCommand.sh has bourne shell function definitions
to keep the syntax similar to mvwm configuration file.
This file is to be sourced:
.EX
\&. MvwmCommand.sh
.br
DesktopSize 5x5
.EE
.br
MvwmCommand.pm is for perl in order
to keep the syntax similar to mvwm configuration file.
Commas can be used to separate mvwm commands' arguments.
.EX
use MvwmCommand;
if( $ARGV[0] eq 'home' ) {
    Desk 0,0; GotoPage '1 1';
}elsif( $ARGV[0] eq 'jump' ) {
    Desk "0 2"; GotoPage 0, 1;
}
.EE
Although arguments in MvwmCommand are not case sensitive as mvwm,
the functions defined in MvwmCommand.sh and MvwmCommand.pl are case sensitive.


.SH ERRORS
If the following error message show up, it is most likely that MvwmCommandS
is not running.
.EX
MvwmCommand error in opening message fifo
--No such file or directory--
.EE
Mvwm modules don't return error messages to mvwm but output on
stderr. These error messages will not be shown as MvwmCommand messages.

MvwmCommand is an interface to send commands to and receive
information from Mvwm2 from processes which are not Mvwm modules.


.SH EXAMPLES
  test1.pl      - takes 1 argument  't' to invoke MvwmTalk
                                    'td'  to kill MvwmTalk
                                    ''  to move windows
  test2.sh      - takes 1 argument  'b'  to invoke MvwmButtons
                                    'kb' to kill MvwmButtons
                                    'r'  to change # of button rows
                                    'c'  to change # of button columns
  ex-auto.pl    - auto raise small windows. It will keep them visible.
  ex-cascade.pl - cascade windows, then move them back.
  ex-grpmv.pl   - choose a group of windows to move together.

  Above examples are not meant to be practical but to show how it can
  be done.



  focus-link.pl
     This is a user programmable window focus script.
     Default behavior is:
      1. When a window is opened up, focus the window and move the pointer
         to it. The parent window regains focus when a window is closed.
         Parenthood is determined when a window is opened. It is the last
         focused window with the same X class.
      2. #1 would not occur to AcroRead opening window.
      3. #1 would not occur when SkipMapping is set and the window is the
         only window of its class.
      4. For Netscape find dialog window, addition to #1, resize the window
         to 300x150 pixels and move it to East edge of the screen.
         Download/upload windows will not be focused nor be in focus link
         list.
      5. Move appletviewer to NorthWest corner.
      6. Xterm won't focus back to its parent after closed.
      7. When a window is de-iconified, focus it and move the pointer.

  focus-Netscape.pl
      Focuses pop-up windows, such as 'open URL' or 'find' whenever
      opened up. This let the user to type in immediately without
      moving mouse. This script also moves 'download' window to the
      right edge to keep it visible. If this is invoked from
      .mvwm2rc, use as:

          AddToFunc "StartFunction" "I" Module  MvwmCommandS
          + "I" Exec $HOME/scripts/focus-Netscape.pl

  push-away.pl <direction> <window name>
      Pushes windows away to avoid overlapping. use as:

          push-away.pl up 'Mvwm Pager'






.SH SEE ALSO
mvwm

.SH AUTHOR
MvwmCommand is the original work of Toshi Isogai.


